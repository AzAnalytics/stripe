import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:math';

class CouponService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üî• R√©cup√©rer la description du coupon depuis le restaurant
  Future<String> getCouponDescription(String restaurantId) async {
    try {
      var couponSnapshot = await _firestore
          .collection('restaurants')
          .doc(restaurantId)
          .collection('coupons')
          .limit(1) // ‚úÖ R√©cup√®re uniquement le premier coupon
          .get();

      if (couponSnapshot.docs.isNotEmpty) {
        return couponSnapshot.docs.first.get('description') ?? "Pas de description disponible";
      }
      return "Pas de description disponible";
    } catch (e) {
      print("‚ùå Erreur r√©cup√©ration description coupon : $e");
      return "Erreur lors du chargement";
    }
  }




  /// üîπ Obtenir ou cr√©er un coupon unique pour un utilisateur et un restaurant
  Future<String> getOrCreateUserCoupon(String restaurantId, String userId) async {
    try {
      // üîç V√©rifie si l'utilisateur a d√©j√† un coupon unique
      var existingCoupon = await _firestore
          .collection('restaurants')
          .doc(restaurantId)
          .collection('coupons')
          .where("userId", isEqualTo: userId)
          .limit(1)
          .get();

      if (existingCoupon.docs.isNotEmpty) {
        return existingCoupon.docs.first.get('uniqueCode'); // üî• Retourne le code existant
      }

      // üîç R√©cup√®re le coupon global du restaurant
      var restaurantCoupon = await _firestore
          .collection('restaurants')
          .doc(restaurantId)
          .collection('coupons')
          .limit(1) // üî• R√©cup√®re uniquement le 1er coupon du restaurant
          .get();

      if (restaurantCoupon.docs.isEmpty) {
        return "Erreur : Aucun coupon disponible"; // ‚ùå Aucun coupon global trouv√©
      }

      // üî• G√©n√®re un code unique pour l'utilisateur
      String uniqueCode = generateUniqueCode();

      // üìù Ajoute l'utilisateur √† un coupon unique bas√© sur le coupon global
      DocumentReference userCouponRef = await _firestore
          .collection('restaurants')
          .doc(restaurantId)
          .collection('coupons')
          .add({
        "restaurantId": restaurantId,
        "userId": userId,
        "uniqueCode": uniqueCode,
        "description": restaurantCoupon.docs.first.get('description'), // üî• R√©cup√®re la description du coupon global
        "discountPercentage": restaurantCoupon.docs.first.get('discountPercentage'),
        "maxPeople": restaurantCoupon.docs.first.get('maxPeople'),
        "isActive": true,
        "createdAt": Timestamp.now(),
        "usedAt": null,
      });

      print("‚úÖ Nouveau coupon g√©n√©r√© avec ID : ${userCouponRef.id} pour l'utilisateur $userId");
      return uniqueCode;
    } catch (e) {
      print("‚ùå Erreur g√©n√©ration coupon : $e");
      return "Erreur";
    }
  }


  /// üîπ G√©n√©rer un code unique al√©atoire
  String generateUniqueCode() {
    const String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    Random random = Random();
    return String.fromCharCodes(
      Iterable.generate(6, (_) => chars.codeUnitAt(random.nextInt(chars.length))),
    );
  }

  /// üîπ Utiliser un coupon et le d√©sactiver
  Future<bool> useCoupon(String uniqueCode) async {
    try {
      var query = await _firestore
          .collectionGroup("coupons") // üî• Recherche dans toutes les collections `coupons`
          .where("uniqueCode", isEqualTo: uniqueCode)
          .where("isActive", isEqualTo: true)
          .limit(1)
          .get();

      if (query.docs.isEmpty) {
        return false; // ‚ùå Coupon invalide ou d√©j√† utilis√©
      }

      String couponId = query.docs.first.id;
      String restaurantId = query.docs.first.get("restaurantId");

      await _firestore
          .collection('restaurants')
          .doc(restaurantId)
          .collection("coupons")
          .doc(couponId)
          .update({
        "isActive": false,
        "usedAt": Timestamp.now(),
      });

      return true; // ‚úÖ Coupon utilis√© avec succ√®s
    } catch (e) {
      print("‚ùå Erreur validation coupon : $e");
      return false;
    }
  }
}
